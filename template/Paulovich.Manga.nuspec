<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <id>Paulovich.Manga</id>
    <version>0.0.7</version>
    <authors>Ivan Paulovich</authors>
    <owners>Ivan Paulovich</owners>
    <projectUrl>https://github.com/ivanpaulovich/manga-clean-architecture</projectUrl>
    <licenseUrl>https://github.com/ivanpaulovich/manga-clean-architecture/blob/master/license</licenseUrl>
	<iconUrl>https://raw.githubusercontent.com/ivanpaulovich/manga-clean-architecture/master/docs/manga-icon.png</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <title>dotnet new manga: Clean Architecture for .NET Applications!</title>
    <description>
$ dotnet new -i Paulovich.Manga
$ dotnet new manga

It creates a .NET Solution with a layered backend (Domain - Application - Infrastructure - WebApi) with the Clean Architecture Style.
    </description>
    <summary>
Try the following commands:

$ dotnet new manga --data-access entityframework
$ dotnet new manga --use-cases readonly
    </summary>
    <releaseNotes>
- Entity Framework support
- Architecture styles support
- Clean architecture with Input/Output/Interactors
- WebAPI
- Docker images optimized for startup
- Mongo.Driver, EntityFramework.Core or Dapper data access frameworks 
- Layerd application with (Application - Domain - Infrastructure - UI)
- Domain-Driven Design (Aggregates, Entities, Value Objects)
- Serilog Logging
    </releaseNotes>
    <tags>
      boilerplate
      solid
      ddd
      clean-architecture
      clean-code
      evolutionary-architecture
      microservices
      hexagonal-architecture
      design-patterns
      docker
      webapi
      domain-driven-design
      mongodb
      dotnet-new
      generator
      tdd
      event-driven
      templating
      microservice
      dotnet-core
      ddd-architecture
      solid-principles
      aggregate
      bearer-authentication
      cqrs-es
      service-bus
      optimistic-updates
      angular
      typescript
      rest-client
      material-design
      bootstrap
      dotnetcore
      dotnet
      layered
      architecture
	  dotnet-cli
	  dotnet-template
	  wcf
	  console
    </tags>
    <language>en-US</language>
    <packageTypes>
      <packageType name="Template" />
    </packageTypes>
	<dependencies>
	</dependencies>
  </metadata>
  <files>
    <file src="**" exclude="**\bin\**\*;**\obj\**\*;**\*.user;**\*.log;**\.vscode\**\*;" />
  </files>
</package>